'use client';
import { useState, useEffect } from 'react';
import { ProtectedRoute } from '@/components/ProtectedRoute';
import { PortalLayout } from '@/components/PortalLayout';
import { useAuth } from '@/contexts/AuthContext';
import { User, Mail, Shield, Calendar, Edit, Save, X, Camera, Lock, CheckCircle, AlertCircle, GraduationCap, Briefcase, Building, Hash, BookOpen, Users, Crown, Award, TrendingUp, Activity, Clock, Settings, Download, Key, Smartphone, Monitor, Zap, BarChart3 } from 'lucide-react';

interface ProfileData { firstName: string; lastName: string; email: string; role: string; profilePicture?: string; studentId?: string; program?: string; yearLevel?: number; section?: string; employeeId?: string; department?: string; position?: string; lastLogin?: string; createdAt?: string; }

export default function AdminProfilePage() {
  const { user } = useAuth();
  const [profile, setProfile] = useState<ProfileData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null);
  const [editData, setEditData] = useState<ProfileData>({ firstName: '', lastName: '', email: '', role: 'student' });

  useEffect(() => { fetchProfile(); }, []);

  const fetchProfile = async () => { try { setIsLoading(true); const { api } = await import('@/lib/api'); const response = await api.get('/auth/profile'); setProfile(response.data.data); setEditData(response.data.data); } catch (error) { setMessage({ type: 'error', text: 'Failed to load profile' }); } finally { setIsLoading(false); } };
  const handleSave = async () => { try { setIsSaving(true); const { api } = await import('@/lib/api'); await api.put('/auth/profile', editData); await fetchProfile(); setIsEditing(false); setMessage({ type: 'success', text: 'Profile updated successfully' }); setTimeout(() => setMessage(null), 3000); } catch (error) { setMessage({ type: 'error', text: 'Failed to update profile' }); } finally { setIsSaving(false); } };
  const getRoleColor = (role: string) => { const colors = { super_admin: 'from-purple-600 via-pink-600 to-red-600', admin: 'from-blue-600 via-indigo-600 to-purple-600', faculty: 'from-green-600 via-emerald-600 to-teal-600', student: 'from-orange-600 via-red-600 to-pink-600' }; return colors[role as keyof typeof colors] || 'from-gray-600 via-slate-600 to-zinc-600'; };
  const getRoleIcon = (role: string) => { const icons = { super_admin: Crown, admin: Shield, faculty: Briefcase, student: GraduationCap }; return icons[role as keyof typeof icons] || User; };
  const getRoleDisplayName = (role: string) => { const names = { super_admin: 'Chief Administrator', admin: 'System Administrator', faculty: 'Faculty Member', student: 'Student' }; return names[role as keyof typeof names] || role; };

  if (isLoading) return (<ProtectedRoute requiredRole="admin"><PortalLayout title="Executive Profile"><div className="flex items-center justify-center min-h-[600px]"><div className="text-center"><div className="relative w-20 h-20 mx-auto mb-6"><div className="absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full animate-spin opacity-20"></div><div className="absolute inset-2 bg-white rounded-full"></div><div className="absolute inset-0 flex items-center justify-center"><Shield className="h-8 w-8 text-blue-600 animate-pulse" /></div></div><p className="text-gray-600 font-medium">Loading executive profile...</p></div></div></PortalLayout></ProtectedRoute>);
  if (!profile) return (<ProtectedRoute requiredRole="admin"><PortalLayout title="Executive Profile"><div className="bg-white rounded-2xl shadow-xl p-12 text-center border border-gray-200"><AlertCircle className="h-20 w-20 text-red-500 mx-auto mb-6" /><h3 className="text-2xl font-bold text-gray-900 mb-3">Profile Not Found</h3><p className="text-gray-600">Unable to load your profile information</p></div></PortalLayout></ProtectedRoute>);

  const RoleIcon = getRoleIcon(profile.role);
  const isAdmin = profile.role === 'admin' || profile.role === 'super_admin';

  return (<ProtectedRoute requiredRole="admin"><PortalLayout title="Executive Profile"><div className="space-y-8">{message && (<div className={`rounded-2xl p-5 flex items-center gap-4 shadow-lg border-2 ${message.type === 'success' ? 'bg-gradient-to-r from-green-50 to-emerald-50 text-green-900 border-green-200' : 'bg-gradient-to-r from-red-50 to-pink-50 text-red-900 border-red-200'}`}>{message.type === 'success' ? <CheckCircle className="h-6 w-6" /> : <AlertCircle className="h-6 w-6" />}<span className="font-semibold text-lg">{message.text}</span></div>)}<div className="relative overflow-hidden"><div className={`absolute inset-0 bg-gradient-to-br ${getRoleColor(profile.role)}`}><div className="absolute inset-0 opacity-10"></div><div className="absolute top-0 right-0 w-96 h-96 bg-white/10 rounded-full blur-3xl"></div><div className="absolute bottom-0 left-0 w-96 h-96 bg-black/10 rounded-full blur-3xl"></div></div><div className="relative z-10 p-10"><div className="flex flex-col lg:flex-row items-start lg:items-center gap-8"><div className="relative group"><div className="absolute -inset-1 bg-gradient-to-r from-white/40 to-white/20 rounded-full blur-lg group-hover:blur-xl transition-all"></div><div className="relative w-40 h-40 bg-white/20 backdrop-blur-xl rounded-full flex items-center justify-center border-4 border-white/40 shadow-2xl">{profile.profilePicture ? (<img src={profile.profilePicture} alt="Profile" className="w-full h-full rounded-full object-cover" />) : (<User className="h-20 w-20 text-white" />)}</div><button className="absolute bottom-2 right-2 bg-white text-gray-900 p-3 rounded-full shadow-xl hover:scale-110 transition-transform border-2 border-white/50"><Camera className="h-5 w-5" /></button>{profile.role === 'super_admin' && (<div className="absolute -top-2 -right-2 bg-gradient-to-r from-yellow-400 to-orange-500 p-2 rounded-full shadow-xl border-2 border-white"><Crown className="h-5 w-5 text-white" /></div>)}</div><div className="flex-1 text-white"><div className="flex items-start justify-between gap-4 mb-4"><div><h1 className="text-5xl font-black mb-3 tracking-tight">{profile.firstName} {profile.lastName}</h1><div className="flex items-center gap-3 mb-4"><div className="flex items-center gap-2 bg-white/20 backdrop-blur-md px-5 py-2 rounded-full border border-white/30"><RoleIcon className="h-5 w-5" /><span className="font-bold text-lg">{getRoleDisplayName(profile.role)}</span></div>{isAdmin && (<div className="flex items-center gap-2 bg-yellow-400/90 text-yellow-900 px-5 py-2 rounded-full border-2 border-yellow-300"><Award className="h-5 w-5" /><span className="font-bold text-lg">Executive Access</span></div>)}</div><div className="flex flex-wrap items-center gap-4 text-white/90"><div className="flex items-center gap-2"><Mail className="h-5 w-5" /><span className="font-medium">{profile.email}</span></div>{profile.lastLogin && (<div className="flex items-center gap-2"><Clock className="h-5 w-5" /><span className="font-medium">Last: {new Date(profile.lastLogin).toLocaleDateString()}</span></div>)}</div></div></div><div className="flex flex-wrap gap-3 mt-6">{!isEditing ? (<><button onClick={() => setIsEditing(true)} className="bg-white text-gray-900 px-8 py-3 rounded-xl hover:bg-gray-100 transition-all flex items-center gap-3 font-bold shadow-xl hover:shadow-2xl hover:scale-105"><Edit className="h-5 w-5" />Edit Profile</button><button className="bg-white/20 backdrop-blur-md text-white px-8 py-3 rounded-xl hover:bg-white/30 transition-all flex items-center gap-3 font-bold border-2 border-white/30"><Settings className="h-5 w-5" />Settings</button></>) : (<><button onClick={handleSave} disabled={isSaving} className="bg-white text-green-600 px-8 py-3 rounded-xl hover:bg-gray-100 transition-all flex items-center gap-3 font-bold shadow-xl disabled:opacity-50"><Save className="h-5 w-5" />{isSaving ? 'Saving...' : 'Save Changes'}</button><button onClick={() => { setEditData(profile); setIsEditing(false); }} disabled={isSaving} className="bg-white/20 backdrop-blur-md text-white px-8 py-3 rounded-xl hover:bg-white/30 transition-all flex items-center gap-3 font-bold border-2 border-white/30 disabled:opacity-50"><X className="h-5 w-5" />Cancel</button></>)}</div></div></div></div></div>{isAdmin && (<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">{[{ label: 'Total Actions', value: '2,847', icon: Activity, color: 'from-blue-500 to-cyan-500', bg: 'from-blue-50 to-cyan-50' },{ label: 'System Uptime', value: '99.9%', icon: TrendingUp, color: 'from-green-500 to-emerald-500', bg: 'from-green-50 to-emerald-50' },{ label: 'Active Sessions', value: '12', icon: Users, color: 'from-purple-500 to-pink-500', bg: 'from-purple-50 to-pink-50' },{ label: 'Response Time', value: '45ms', icon: Zap, color: 'from-orange-500 to-red-500', bg: 'from-orange-50 to-red-50' }].map((stat, i) => (<div key={i} className="group relative"><div className={`absolute inset-0 bg-gradient-to-br ${stat.color} rounded-2xl opacity-0 group-hover:opacity-10 transition-opacity`}></div><div className={`relative bg-gradient-to-br ${stat.bg} rounded-2xl p-6 border-2 border-gray-200 hover:border-gray-300 transition-all hover:shadow-xl`}><div className="flex items-center justify-between mb-4"><div className={`p-3 rounded-xl bg-gradient-to-br ${stat.color} shadow-lg`}><stat.icon className="h-6 w-6 text-white" /></div><TrendingUp className="h-5 w-5 text-green-600" /></div><p className="text-sm font-bold text-gray-600 uppercase tracking-wider mb-1">{stat.label}</p><p className="text-3xl font-black text-gray-900">{stat.value}</p></div></div>))}</div>)}<div className="bg-white rounded-2xl shadow-xl p-8"><h2 className="text-2xl font-black text-gray-900 mb-6">Profile Information</h2><div className="grid grid-cols-1 md:grid-cols-2 gap-6"><div><label className="block text-sm font-bold text-gray-600 uppercase mb-2">First Name</label>{isEditing ? <input type="text" value={editData.firstName} onChange={(e) => setEditData({ ...editData, firstName: e.target.value })} className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-semibold" /> : <p className="text-lg font-bold text-gray-900 bg-gray-50 px-4 py-3 rounded-xl">{profile.firstName}</p>}</div><div><label className="block text-sm font-bold text-gray-600 uppercase mb-2">Last Name</label>{isEditing ? <input type="text" value={editData.lastName} onChange={(e) => setEditData({ ...editData, lastName: e.target.value })} className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-semibold" /> : <p className="text-lg font-bold text-gray-900 bg-gray-50 px-4 py-3 rounded-xl">{profile.lastName}</p>}</div></div></div></div></PortalLayout></ProtectedRoute>);
}
